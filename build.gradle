plugins {
	id 'fabric-loom' version '1.8-SNAPSHOT'
	id 'dev.kikugie.stonecutter'
	id 'maven-publish'
}

def mcVersion = stonecutter.current.version

version = property("mod_version") + "+" + mcVersion
group = property("maven_group")

base {
	archivesName = property("archives_base_name")
}

repositories {
	exclusiveContent {
		forRepository {
			maven {
				name = "Modrinth"
				url = "https://api.modrinth.com/maven"
			}
		}
		filter {
			includeGroup "maven.modrinth"
		}
	}
}

dependencies {
	// To change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${mcVersion}"
	mappings "net.fabricmc:yarn:${property("yarn_mappings")}:v2"
	modImplementation "net.fabricmc:fabric-loader:${property("loader_version")}"
	modImplementation "net.fabricmc.fabric-api:fabric-api:${property("fabric_version")}"

	modCompileOnly "maven.modrinth:sodium:${property("sodium_version")}"

	// Comment this line out if testing in game without sodium
	modRuntimeOnly "maven.modrinth:sodium:${property("sodium_version")}"
}

if (stonecutter.current.isActive) { // run configs for non-active version would be invalid
	loom {
		runConfigs.all {
			ideConfigGenerated = true // generate IDE tasks for running client, server and testmod, datagen if those are present
			runDir "../../run" // use a global run directory for all versions
		}
	}
}

stonecutter {
	swap("graphics_mode",	   		eval(mcVersion, ">=1.19.2") ? ".getGraphicsMode().getValue()" : ".graphicsMode")
	swap("translatable", 	   		eval(mcVersion, ">=1.19.2") ? "Text::translatable" : "TranslatableText::new")
	swap("list_type", 		   		eval(mcVersion, ">=1.19.3") ? "Sprite.TickableAnimation" : "TextureTickListener")
	swap("create_method", 	   		eval(mcVersion, ">=1.20.6") ? "\"create\"" : "\"createParticle(Lnet/minecraft/particle/BlockStateParticleEffect;Lnet/minecraft/client/world/ClientWorld;DDDDDD)Lnet/minecraft/client/particle/Particle;\"")
	swap("identifier", 		   		eval(mcVersion, ">=1.21.1") ? "Identifier.of(MOD_ID, name);" : "new Identifier(MOD_ID, name);")

	def packName = "translated"
	def sodiumPackage = eval(mcVersion, ">=1.21.1") ? "net.caffeinemc" : "me.jellysquid"

	if (eval(mcVersion, "<1.19.3"))
		packName += ".getString()"

	swap("pack_name", packName)
	swap("sodium_package", sodiumPackage)
	swap("quality_target", "\"L%s/mods/sodium/client/gui/options/OptionGroup;createBuilder()L%<s/mods/sodium/client/gui/options/OptionGroup\$Builder;\"".formatted(sodiumPackage.replace('.', '/')))
}

def javaVersion = stonecutter.eval(mcVersion, ">=1.20.6") ? JavaVersion.VERSION_21 : JavaVersion.VERSION_17
def javaVersionNumber = javaVersion.ordinal() + 1

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version,
				"target": project.property("target_version"),
				"java_version": javaVersionNumber
	}

}

tasks.withType(JavaCompile).configureEach {
	it.options.release = javaVersionNumber
}

java {
	withSourcesJar()

	sourceCompatibility = javaVersion
	targetCompatibility = javaVersion
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.base.archivesName.get()}"}
	}
}

// configure the maven publication
publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java
		}
	}
}