plugins {
	id 'fabric-loom' version '1.6-SNAPSHOT'
	id 'maven-publish'
}

version = "${property("mod_version")}+${stonecutter.current.version}"
group = property("maven_group")

base {
	archivesName = property("archives_base_name")
}

repositories {
	exclusiveContent {
		forRepository {
			maven {
				name = "Modrinth"
				url = "https://api.modrinth.com/maven"
			}
		}
		filter {
			includeGroup "maven.modrinth"
		}
	}
}

dependencies {
	// To change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${stonecutter.current.version}"
	mappings "net.fabricmc:yarn:${property("yarn_mappings")}:v2"
	modImplementation "net.fabricmc:fabric-loader:${property("loader_version")}"
	modImplementation "net.fabricmc.fabric-api:fabric-api:${property("fabric_version")}"

	modCompileOnly "maven.modrinth:sodium:${property("sodium_version")}"
	modRuntimeOnly "maven.modrinth:sodium:${property("sodium_version")}"
}

if (stonecutter.current.isActive) { // run configs for non-active version would be invalid
	loom {
		runConfigs.all {
			ideConfigGenerated = true // generate IDE tasks for running client, server and testmod, datagen if those are present
			runDir "../../run" // use a global run directory for all versions
		}
	}
}

stonecutter.swap("create_method") {
	stonecutter.compare(stonecutter.current.version, "1.20.6") >= 0 ? "\"create\"," : "\"createParticle(Lnet/minecraft/particle/BlockStateParticleEffect;Lnet/minecraft/client/world/ClientWorld;DDDDDD)Lnet/minecraft/client/particle/Particle;\","
}

stonecutter.swap("graphics_mode") {
	stonecutter.compare(stonecutter.current.version, "1.19.2") >= 0 ? ".getGraphicsMode().getValue();" : ".graphicsMode;"
}

stonecutter.swap("list_type") {
	stonecutter.compare(stonecutter.current.version, "1.19.3") >= 0 ? "Sprite.TickableAnimation" : "TextureTickListener"
}

stonecutter.swap("pack_name") {
	stonecutter.compare(stonecutter.current.version, "1.19.3") >= 0 ? "name," : "String.valueOf(name),"
}

stonecutter.swap("identifier") {
	stonecutter.compare(stonecutter.current.version, "1.21") >= 0 ? "Identifier.of(MOD_ID, name);" : "new Identifier(MOD_ID, name);"
}

stonecutter.swap("translatable") {
	stonecutter.compare(stonecutter.current.version, "1.19.2") >= 0 ? "Text.translatable(key);" : "new TranslatableText(key);"
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version,
				"target": project.property("target_version")
	}

}

tasks.withType(JavaCompile).configureEach {
	it.options.release = 17
}

java {
	withSourcesJar()

	sourceCompatibility = JavaVersion.VERSION_17
	targetCompatibility = JavaVersion.VERSION_17
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.base.archivesName.get()}"}
	}
}

// configure the maven publication
publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java
		}
	}
}